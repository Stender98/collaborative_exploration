bt_navigator:
    ros__parameters:
        use_sim_time: True
        global_frame: map
        robot_base_frame: <robot_frame_namespace>/base_footprint # Changed to match controller
        odom_topic: <robot_namespace>/odom
        bt_loop_duration: 10
        default_server_timeout: 20
        wait_for_service_timeout: 1000
        action_server_result_timeout: 900.0
        # Try setting the parameter here at the top level
        default_nav_to_pose_bt_xml: '$(find-pkg-share epuck_nav2_pkg)/config/navigate_to_pose_no_spin.xml'
        navigators: ['navigate_to_pose']
        navigate_to_pose:
            plugin: 'nav2_bt_navigator::NavigateToPoseNavigator'

        # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
        # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
        # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
        # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.

        # plugin_lib_names is used to add custom BT plugins to the executor (vector of strings).
        # Built-in plugins are added automatically
        # plugin_lib_names: []

        error_code_names:
            - compute_path_error_code
            - follow_path_error_code

controller_server:
    ros__parameters:
        use_sim_time: True
        controller_frequency: 10.0
        costmap_update_timeout: 0.30
        min_x_velocity_threshold: 0.001
        min_y_velocity_threshold: 0.5
        min_theta_velocity_threshold: 0.001
        failure_tolerance: 0.3
        progress_checker_plugins: ['progress_checker']
        goal_checker_plugins: ['general_goal_checker'] # "precise_goal_checker"
        controller_plugins: ['FollowPath']
        use_realtime_priority: false

        # Progress checker parameters
        progress_checker:
            plugin: 'nav2_controller::SimpleProgressChecker'
            required_movement_radius: 0.05
            movement_time_allowance: 10.0
        # Goal checker parameters
        precise_goal_checker:
            plugin: 'nav2_controller::SimpleGoalChecker'
            xy_goal_tolerance: 0.05
            yaw_goal_tolerance: 0.1
            stateful: True
        general_goal_checker:
            stateful: True
            plugin: 'nav2_controller::SimpleGoalChecker'
            xy_goal_tolerance: 0.05
            yaw_goal_tolerance: 0.1
        FollowPath:
            plugin: 'nav2_mppi_controller::MPPIController'
            time_steps: 32
            model_dt: 0.1
            batch_size: 500
            vx_max: 0.25 # E-puck max forward speed
            vx_min: -0.25 # E-puck max backward speed
            vy_max: 0.0 # No lateral motion
            wz_max: 6.28 # E-puck max rotation speed
            iteration_count: 2
            prune_distance: 1.7
            transform_tolerance: 1.0
            temperature: 0.3
            gamma: 0.02
            motion_model: 'DiffDrive'
            visualize: true
            regenerate_noises: true
            TrajectoryVisualizer:
                trajectory_step: 5
                time_step: 3
            AckermannConstraints:
                min_turning_r: 0.052 # E-puck axle length
            critics: ['ConstraintCritic', 'CostCritic', 'GoalCritic', 'GoalAngleCritic', 'PathAlignCritic', 'PathFollowCritic', 'PathAngleCritic', 'PreferForwardCritic']
            ConstraintCritic:
                enabled: true
                cost_power: 1
                cost_weight: 6.0
            GoalCritic:
                enabled: true
                cost_power: 1
                cost_weight: 5.0
                threshold_to_consider: 1.4
            GoalAngleCritic:
                enabled: true
                cost_power: 1
                cost_weight: 3.0
                threshold_to_consider: 0.5
            PreferForwardCritic:
                enabled: true
                cost_power: 1
                cost_weight: 5.0
                threshold_to_consider: 0.5
            CostCritic:
                enabled: true
                cost_power: 1
                cost_weight: 12.0
                critical_cost: 300.0
                consider_footprint: true
                collision_cost: 1000000.0
                near_goal_distance: 1.0
                trajectory_point_step: 2
            PathAlignCritic:
                enabled: true
                cost_power: 1
                cost_weight: 25.0
                max_path_occupancy_ratio: 0.05
                trajectory_point_step: 4
                threshold_to_consider: 0.5
                offset_from_furthest: 20
                use_path_orientations: false
            PathFollowCritic:
                enabled: true
                cost_power: 1
                cost_weight: 15.0
                offset_from_furthest: 5
                threshold_to_consider: 1.4
            PathAngleCritic:
                enabled: true
                cost_power: 1
                cost_weight: 2.0
                offset_from_furthest: 4
                threshold_to_consider: 0.5
                max_angle_to_furthest: 1.0
                mode: 0
            # TwirlingCritic:
            #   enabled: true
            #   twirling_cost_power: 1
            #   twirling_cost_weight: 10.0

local_costmap:
    local_costmap:
        ros__parameters:
            use_sim_time: True
            update_frequency: 10.0
            publish_frequency: 5.0
            transform_tolerance: 1.0
            global_frame: <robot_frame_namespace>/odom
            robot_base_frame: <robot_frame_namespace>/base_footprint
            rolling_window: true
            width: 3
            height: 3
            resolution: 0.05
            robot_radius: 0.0355 # E-puck radius (keep as is)
            plugins: ['voxel_layer', 'inflation_layer', 'obstacle_layer']
            inflation_layer:
                plugin: 'nav2_costmap_2d::InflationLayer'
                cost_scaling_factor: 20.0 # Increase to make cost drop off faster (less bloating)
                inflation_radius: 0.25 # Set to 0.1 m (min distance) + 0.0355 m (radius) + a small margin
            obstacle_layer:
                plugin: 'nav2_costmap_2d::ObstacleLayer'
                enabled: True
                observation_sources: scan
                scan:
                    topic: <robot_namespace>/scan
                    max_obstacle_height: 0.15
                    clearing: True
                    marking: True
                    data_type: 'LaserScan'
            voxel_layer:
                plugin: 'nav2_costmap_2d::VoxelLayer'
                enabled: True
                publish_voxel_map: True
                origin_z: 0.0
                z_resolution: 0.05
                z_voxels: 16
                max_obstacle_height: 0.15
                mark_threshold: 0
                observation_sources: scan
                scan:
                    topic: <robot_namespace>/scan
                    max_obstacle_height: 0.25
                    clearing: True
                    marking: True
                    data_type: 'LaserScan'
                    raytrace_max_range: 3.5
                    raytrace_min_range: 0.12
                    obstacle_max_range: 3.5
                    obstacle_min_range: 0.0
            always_send_full_costmap: True

global_costmap:
    global_costmap:
        ros__parameters:
            use_sim_time: True
            update_frequency: 1.0
            publish_frequency: 1.0
            transform_tolerance: 1.0
            global_frame: map
            map_topic: /map
            robot_base_frame: <robot_frame_namespace>/base_footprint
            robot_radius: 0.0355 # E-puck radius (keep as is)
            resolution: 0.05
            track_unknown_space: true
            plugins: ['static_layer', 'obstacle_layer', 'inflation_layer']
            obstacle_layer:
                plugin: 'nav2_costmap_2d::ObstacleLayer'
                enabled: True
                observation_sources: scan
                scan:
                    topic: <robot_namespace>/scan
                    max_obstacle_height: 0.15
                    clearing: True
                    marking: True
                    data_type: 'LaserScan'
                    raytrace_max_range: 3.5
                    raytrace_min_range: 0.12
                    obstacle_max_range: 3.5
                    obstacle_min_range: 0.0
            static_layer:
                plugin: 'nav2_costmap_2d::StaticLayer'
                map_subscribe_transient_local: True
            inflation_layer:
                plugin: 'nav2_costmap_2d::InflationLayer'
                cost_scaling_factor: 20.0 # Increase to make cost drop off faster (less bloating)
                inflation_radius: 0.25 # Set to 0.1 m (min distance) + 0.0355 m (radius) + a small margin
            always_send_full_costmap: True

# The yaml_filename does not need to be specified since it going to be set by defaults in launch.
# If you'd rather set it in the yaml, remove the default "map" value in the tb3_simulation_launch.py
# file & provide full path to map below. If CLI map configuration or launch default is provided, that will be used.
# map_server:
#   ros__parameters:
#     yaml_filename: ""

map_saver:
    ros__parameters:
        use_sim_time: True
        save_map_timeout: 5.0
        free_thresh_default: 0.25
        occupied_thresh_default: 0.65
        map_subscribe_transient_local: True

planner_server:
    ros__parameters:
        use_sim_time: True
        expected_planner_frequency: 10.0
        planner_plugins: ['GridBased']
        costmap_update_timeout: 1.0
        GridBased:
            plugin: 'nav2_navfn_planner::NavfnPlanner'
            tolerance: 0.1
            use_astar: true
            allow_unknown: true

smoother_server:
    ros__parameters:
        use_sim_time: True
        smoother_plugins: ['simple_smoother']
        simple_smoother:
            plugin: 'nav2_smoother::SimpleSmoother'
            tolerance: 1.0e-4
            max_its: 1000
            do_refinement: True

behavior_server:
    ros__parameters:
        use_sim_time: True
        local_costmap_topic: <robot_namespace>/local_costmap/costmap_raw
        global_costmap_topic: <robot_namespace>/global_costmap/costmap_raw
        local_footprint_topic: <robot_namespace>/local_costmap/published_footprint
        global_footprint_topic: <robot_namespace>/global_costmap/published_footprint
        cycle_frequency: 10.0
        behavior_plugins: ['backup', 'drive_on_heading', 'assisted_teleop', 'wait']
        backup:
            plugin: 'nav2_behaviors::BackUp'
        drive_on_heading:
            plugin: 'nav2_behaviors::DriveOnHeading'
        wait:
            plugin: 'nav2_behaviors::Wait'
        assisted_teleop:
            plugin: 'nav2_behaviors::AssistedTeleop'
        local_frame: <robot_frame_namespace>/odom
        global_frame: map
        robot_base_frame: <robot_frame_namespace>/base_footprint # Changed to match controller
        transform_tolerance: 1.0
        simulate_ahead_time: 2.0
        max_rotational_vel: 6.28 # E-puck max rotation speed
        min_rotational_vel: 0.4
        rotational_acc_lim: 12.0 # Adjusted for e-puck

waypoint_follower:
    ros__parameters:
        use_sim_time: True
        loop_rate: 20
        stop_on_failure: false
        action_server_result_timeout: 900.0
        waypoint_task_executor_plugin: 'wait_at_waypoint'
        wait_at_waypoint:
            plugin: 'nav2_waypoint_follower::WaitAtWaypoint'
            enabled: True
            waypoint_pause_duration: 200

velocity_smoother:
    ros__parameters:
        use_sim_time: True
        smoothing_frequency: 10.0
        scale_velocities: False
        feedback: 'OPEN_LOOP'
        max_velocity: [0.25, 0.0, 6.28] # E-puck: max linear, 0 lateral, max angular
        min_velocity: [-0.25, 0.0, -6.28] # E-puck: min linear, 0 lateral, min angular
        max_accel: [2.0, 0.0, 12.0] # Adjusted for e-puck
        max_decel: [-2.0, 0.0, -12.0] # Adjusted for e-puck
        odom_topic: <robot_namespace>/odom
        odom_duration: 0.1
        deadband_velocity: [0.0, 0.0, 0.0]
        velocity_timeout: 1.0

collision_monitor:
    ros__parameters:
        use_sim_time: True
        base_frame_id: <robot_frame_namespace>/base_footprint # Already correct
        odom_frame_id: <robot_frame_namespace>/odom
        cmd_vel_in_topic: <robot_namespace>/cmd_vel_smoothed
        cmd_vel_out_topic: <robot_namespace>/cmd_vel
        state_topic: <robot_namespace>/collision_monitor_state
        transform_tolerance: 1.0
        source_timeout: 1.0
        base_shift_correction: True
        stop_pub_timeout: 2.0
        polygons: ['FootprintApproach']
        FootprintApproach:
            type: 'polygon'
            action_type: 'approach'
            footprint_topic: <robot_namespace>/local_costmap/published_footprint
            time_before_collision: 0.8
            simulation_time_step: 0.05
            min_points: 6
            visualize: False
            enabled: True
        observation_sources: ['scan']
        scan:
            type: scan
            topic: <robot_namespace>/scan
            min_height: 0.0
            max_height: 0.15
            enabled: True

docking_server:
    ros__parameters:
        use_sim_time: True
        controller_frequency: 50.0
        initial_perception_timeout: 5.0
        wait_charge_timeout: 5.0
        dock_approach_timeout: 30.0
        undock_linear_tolerance: 0.05
        undock_angular_tolerance: 0.5
        max_retries: 3
        base_frame: <robot_frame_namespace>/base_footprint # Changed to match controller
        fixed_frame: <robot_frame_namespace>/odom
        dock_backwards: false
        dock_prestaging_tolerance: 0.5

        # Types of docks
        dock_plugins: ['simple_charging_dock']
        simple_charging_dock:
            plugin: 'opennav_docking::SimpleChargingDock'
            docking_threshold: 0.05
            staging_x_offset: -0.7
            use_external_detection_pose: true
            use_battery_status: false # true
            use_stall_detection: false # true

            external_detection_timeout: 1.0
            external_detection_translation_x: -0.18
            external_detection_translation_y: 0.0
            external_detection_rotation_roll: -1.57
            external_detection_rotation_pitch: -1.57
            external_detection_rotation_yaw: 0.0
            filter_coef: 0.1

        # Dock instances
        # docks: ['home_dock']  # Input your docks here
        # home_dock:
        #   type: 'simple_charging_dock'
        #   frame: map
        #   pose: [0.0, 0.0, 0.0]

        controller:
            k_phi: 3.0
            k_delta: 2.0
            v_linear_min: 0.15
            v_linear_max: 0.15
            use_collision_detection: true
            costmap_topic: <robot_namespace>/local_costmap/costmap_raw
            footprint_topic: <robot_namespace>/local_costmap/published_footprint
            transform_tolerance: 1.0
            projection_time: 5.0
            simulation_step: 0.1
            dock_collision_threshold: 0.3

loopback_simulator:
    ros__parameters:
        use_sim_time: True
        base_frame_id: <robot_frame_namespace>/base_footprint # Already correct
        odom_frame_id: <robot_frame_namespace>/odom
        map_frame_id: 'map'
        scan_frame_id: <robot_frame_namespace>/laser # Changed to match controller’s LIDAR frame
        update_duration: 0.02
        tf_topic: '/tf' # If supported
        tf_static_topic: '/tf_static'
